AWSTemplateFormatVersion: '2010-09-09'
Description: Bastion host, useful to access private instances created inside a VPC.
  (qs-1puphiin3)
Parameters:
  InstanceType:
    Default: t2.micro
    Description: The AWS Instance Type to use for our bastion host
    Type: String
  KeyPairName:
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Description: Name of an existing EC2 KeyPair used to get the Administrator password
      for the instance
    Type: AWS::EC2::KeyPair::KeyName
  SourceCIDR:
    Default: 69.25.143.0/24
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: CIDR from which you may connect to web interface or bastion host
      (e.g., 1.1.1.1/32)
    Type: String
  SubnetId:
    Description: The Id of the subnet for the bastion host
    Type: AWS::EC2::Subnet::Id
    MinLength: '1'
  VPCID:
    Description: ID of the VPC (e.g., vpc-0343606e)
    Type: AWS::EC2::VPC::Id
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Bastion Networking Information
        Parameters:
          - SourceCIDR
          - SubnetId
          - VPCID
      - Label:
          default: Bastion Machine Information
        Parameters:
          - InstanceType
          - KeyPairName
    ParameterLabels:
      InstanceType:
        default: The instance type for the bastion
      KeyPairName:
        default: The KeyPair used to connect to the bastion
      SourceCIDR:
        default: CIDR describing who can connect to the bastion
      SubnetId:
        default: The subnet on which to place the bastion
      VPCID:
        default: The VPC id in which to create the bastion
Mappings:
  AWSAMIRegionMap:
    AMI:
      WS2012R2: Windows_Server-2012-R2_RTM-English-64Bit-Base-2019.07.12
    ap-northeast-1:
      WS2012R2: ami-06823103be2218b98
    ap-northeast-2:
      WS2012R2: ami-050e65d9f2ec90145
    ap-south-1:
      WS2012R2: ami-045e1f06f29929467
    ap-southeast-1:
      WS2012R2: ami-0c322369af7718803
    ap-southeast-2:
      WS2012R2: ami-0813db0de4ddab990
    ca-central-1:
      WS2012R2: ami-0850dfaa3ee6f6233
    eu-central-1:
      WS2012R2: ami-024652d0a3df40e74
    eu-west-1:
      WS2012R2: ami-0d2f69fcc5f00c97a
    eu-west-2:
      WS2012R2: ami-0998a91bb1756752d
    sa-east-1:
      WS2012R2: ami-044d56b6baa621d7d
    us-east-1:
      WS2012R2: ami-094a644f1fb9e4ce3
    us-east-2:
      WS2012R2: ami-0a1a54d8690206089
    us-west-1:
      WS2012R2: ami-094dcbdb1aa24c8da
    us-west-2:
      WS2012R2: ami-0f8967b5f815400c0
Resources:
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable RDP traffic to the bastion host
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: !Ref 'SourceCIDR'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-BastionSecurityGroup'
      VpcId: !Ref 'VPCID'
  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'InstanceType'
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - WS2012R2
      SecurityGroupIds:
        - !Ref 'BastionSecurityGroup'
      KeyName: !Ref 'KeyPairName'
      SubnetId: !Ref 'SubnetId'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-bastion-host'
Outputs:
  BastionInstance:
    Description: The bastion EC2 instance
    Value: !Ref 'BastionHost'
  BastionDNSName:
    Description: Public DNS name of bastion host
    Value: !GetAtt 'BastionHost.PublicDnsName'
  SecurityGroup:
    Description: Baston Security Group
    Value: !Ref 'BastionSecurityGroup'
